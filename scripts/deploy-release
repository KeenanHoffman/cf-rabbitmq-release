#!/bin/bash

set -e

BOSH_TARGET_ALIAS="lite"
WORKSPACE_BASE_DIR="${WORKSPACE_BASE_DIR:-$HOME/workspace}"
RELEASE_NAME=rabbitmq

log() {
  local _message=$1
  echo -e "$_message"
}

bosh_target_and_set_deployment() {
  local _bosh_target=$1
  local _bosh_deployment_manifest_path=$2

  bosh target "$_bosh_target"
  bosh deployment "$_bosh_deployment_manifest_path"
}

bosh_deploy() {
  bosh -n deploy
}

bosh_run_errand() {
  local _errand_name=$1

  bosh -n run errand "$_errand_name"
}

check_args() {
  if [ -z "$BOSH_MANIFEST" ]
  then
    log "Please set the BOSH_MANIFEST environment variable to the path to your manifest file"
    log "E.G. export BOSH_MANIFEST=~/workspace/london-ci-tools/manifests/${RELEASE_NAME}/develop/development/bosh-lite.yml"
    exit 1
  fi

  if [ "$#" -lt 1 ]
  then
    log "[WARN] no BOSH target specified - defaulting to lite"
  else
    BOSH_TARGET_ALIAS=$1
  fi
}

update_release() {
  check_ssh_keys_loaded

  if [ -f scripts/update-release ]
  then
    scripts/update-release
  else
    log "[INFO] Could not find the 'scripts/update-release' script in $(pwd), manually updating release"
    git submodule update --init --recursive
    if [ -f scripts/update-release ]; then
      bundle install
    fi
  fi
}

upload_release() {
  local _release_path=$1

  pushd "$_release_path"
  update_release
  bosh -n create release --with-tarball --force
  bosh -n upload release --rebase || log "[WARN] Attempted a --rebase, but there were no job or package changes."
  popd
}

check_ssh_keys_loaded() {
  (
    ssh-add -l
  )

  if [ $? -ne 0 ]; then
    echo "Please add your ssh key"
    exit 1
  fi
}

upload_loggregator_release() {
  local _bosh_deployment_manifest_path=$1

  if ! manifest_contains_release "loggregator" $_bosh_deployment_manifest_path
  then
    log "[INFO] Skipped loggregator release because not found in manifest"
    return
  fi

  upload_release "${WORKSPACE_BASE_DIR}/loggregator"
}

manifest_contains_release() {
  local _release_name=$1
  local _bosh_deployment_manifest_path=$2

  grep "release:[[:space:]]\+$_release_name" $_bosh_deployment_manifest_path
}

upload_metrics_release() {
  local _bosh_deployment_manifest_path=$1

  if ! manifest_contains_release "service-metrics" $_bosh_deployment_manifest_path
  then
    log "[INFO] Skipped service metrics release because not found in manifest"
    return
  fi

  upload_release "${WORKSPACE_BASE_DIR}/service-metrics-release"
  upload_release "${WORKSPACE_BASE_DIR}/rabbitmq-metrics-release"
}

main() {
  check_args "$@"

  bosh_target_and_set_deployment "$BOSH_TARGET_ALIAS" "$BOSH_MANIFEST"

  upload_release "${WORKSPACE_BASE_DIR}/cf-${RELEASE_NAME}-release"
  upload_metrics_release "$BOSH_MANIFEST"
  upload_loggregator_release "$BOSH_MANIFEST"

  bosh_deploy
  bosh_run_errand "broker-registrar"
}

main "$@"
